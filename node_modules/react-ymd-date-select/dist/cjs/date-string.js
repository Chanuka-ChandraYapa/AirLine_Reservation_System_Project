"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDateString = exports.parseDateString = exports.compileDateString = void 0;
const isExists_1 = __importDefault(require("date-fns/isExists"));
function padZero(value, digits) {
    // This implementation is only to be used from `compileDateString()`,
    // assuming the `value` is a positive integer.
    // Negative or floating numbers as inputs can lead to unexpected results.
    return ("0".repeat(digits - 1) + value.toString()).slice(-digits);
}
function compileDateString(year, month, day) {
    // Create a date string in the format of `yyyy-MM-dd`.
    // For the detailed specs of the format, see https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats#date_strings
    if (!(0, isExists_1.default)(year, month - 1, day)) {
        return null;
    }
    const dateString = padZero(year, 4) + "-" + padZero(month, 2) + "-" + padZero(day, 2);
    return dateString;
}
exports.compileDateString = compileDateString;
function parseDateString(dateString) {
    const date = new Date(dateString);
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const day = date.getDate();
    if (isNaN(year) || isNaN(month) || isNaN(day)) {
        return { year: "", month: "", day: "" };
    }
    return {
        year: year.toString(),
        month: month.toString(),
        day: day.toString(),
    };
}
exports.parseDateString = parseDateString;
function getDateString(date) {
    return compileDateString(date.getFullYear(), date.getMonth() + 1, date.getDate());
}
exports.getDateString = getDateString;
