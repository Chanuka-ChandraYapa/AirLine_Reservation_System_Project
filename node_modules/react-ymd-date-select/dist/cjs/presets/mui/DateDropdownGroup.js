"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const react_2 = require("react");
const InputLabel_1 = __importDefault(require("@mui/material/InputLabel"));
const MenuItem_1 = __importDefault(require("@mui/material/MenuItem"));
const FormControl_1 = __importDefault(require("@mui/material/FormControl"));
const Select_1 = __importDefault(require("@mui/material/Select"));
let globalIdCount = 0;
const DateDropdownGroup = react_1.default.forwardRef((props, ref) => {
    (0, react_2.useEffect)(() => {
        globalIdCount++;
    }, []);
    const idPrefix = `react-ymd-date-select-mui-${globalIdCount.toString()}`;
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(FormControl_1.default, Object.assign({ sx: { minWidth: 100 } }, { children: [(0, jsx_runtime_1.jsx)(InputLabel_1.default, Object.assign({ id: `${idPrefix}-month` }, { children: "Year" })), (0, jsx_runtime_1.jsxs)(Select_1.default, Object.assign({ labelId: `${idPrefix}-year`, value: props.yearValue, onChange: (0, react_2.useCallback)((e) => {
                            props.onYearChange(e.target.value);
                        }, [props.onYearChange]), label: "Year" }, { children: [(0, jsx_runtime_1.jsx)(MenuItem_1.default, { value: "", disabled: true }), props.yearOptions.map(({ value, label }) => ((0, jsx_runtime_1.jsx)(MenuItem_1.default, Object.assign({ value: value }, { children: label }), value)))] }))] })), (0, jsx_runtime_1.jsxs)(FormControl_1.default, Object.assign({ sx: { minWidth: 100 } }, { children: [(0, jsx_runtime_1.jsx)(InputLabel_1.default, Object.assign({ id: `${idPrefix}-month` }, { children: "Month" })), (0, jsx_runtime_1.jsxs)(Select_1.default, Object.assign({ labelId: `${idPrefix}-month`, value: props.monthValue, onChange: (0, react_2.useCallback)((e) => {
                            props.onMonthChange(e.target.value);
                        }, [props.onMonthChange]), label: "Month", ref: props.hideDay ? ref : undefined }, { children: [(0, jsx_runtime_1.jsx)(MenuItem_1.default, { value: "", disabled: true }), props.monthOptions.map(({ value, label }) => ((0, jsx_runtime_1.jsx)(MenuItem_1.default, Object.assign({ value: value }, { children: label }), value)))] }))] })), !props.hideDay && ((0, jsx_runtime_1.jsxs)(FormControl_1.default, Object.assign({ sx: { minWidth: 100 } }, { children: [(0, jsx_runtime_1.jsx)(InputLabel_1.default, Object.assign({ id: `${idPrefix}-day` }, { children: "Day" })), (0, jsx_runtime_1.jsxs)(Select_1.default, Object.assign({ labelId: `${idPrefix}-day`, value: props.dayValue, onChange: (0, react_2.useCallback)((e) => {
                            props.onDayChange(e.target.value);
                        }, [props.onDayChange]), label: "Day", ref: ref }, { children: [(0, jsx_runtime_1.jsx)(MenuItem_1.default, { value: "", disabled: true }), props.dayOptions.map(({ value, label }) => ((0, jsx_runtime_1.jsx)(MenuItem_1.default, Object.assign({ value: value }, { children: label }), value)))] }))] })))] }));
});
DateDropdownGroup.displayName = "DateDropdownGroup";
exports.default = DateDropdownGroup;
