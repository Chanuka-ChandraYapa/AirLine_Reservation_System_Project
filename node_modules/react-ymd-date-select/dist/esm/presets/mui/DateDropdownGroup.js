import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import React from "react";
import { useEffect, useCallback } from "react";
import InputLabel from "@mui/material/InputLabel";
import MenuItem from "@mui/material/MenuItem";
import FormControl from "@mui/material/FormControl";
import Select from "@mui/material/Select";
let globalIdCount = 0;
const DateDropdownGroup = React.forwardRef((props, ref) => {
    useEffect(() => {
        globalIdCount++;
    }, []);
    const idPrefix = `react-ymd-date-select-mui-${globalIdCount.toString()}`;
    return (_jsxs(_Fragment, { children: [_jsxs(FormControl, Object.assign({ sx: { minWidth: 100 } }, { children: [_jsx(InputLabel, Object.assign({ id: `${idPrefix}-month` }, { children: "Year" })), _jsxs(Select, Object.assign({ labelId: `${idPrefix}-year`, value: props.yearValue, onChange: useCallback((e) => {
                            props.onYearChange(e.target.value);
                        }, [props.onYearChange]), label: "Year" }, { children: [_jsx(MenuItem, { value: "", disabled: true }), props.yearOptions.map(({ value, label }) => (_jsx(MenuItem, Object.assign({ value: value }, { children: label }), value)))] }))] })), _jsxs(FormControl, Object.assign({ sx: { minWidth: 100 } }, { children: [_jsx(InputLabel, Object.assign({ id: `${idPrefix}-month` }, { children: "Month" })), _jsxs(Select, Object.assign({ labelId: `${idPrefix}-month`, value: props.monthValue, onChange: useCallback((e) => {
                            props.onMonthChange(e.target.value);
                        }, [props.onMonthChange]), label: "Month", ref: props.hideDay ? ref : undefined }, { children: [_jsx(MenuItem, { value: "", disabled: true }), props.monthOptions.map(({ value, label }) => (_jsx(MenuItem, Object.assign({ value: value }, { children: label }), value)))] }))] })), !props.hideDay && (_jsxs(FormControl, Object.assign({ sx: { minWidth: 100 } }, { children: [_jsx(InputLabel, Object.assign({ id: `${idPrefix}-day` }, { children: "Day" })), _jsxs(Select, Object.assign({ labelId: `${idPrefix}-day`, value: props.dayValue, onChange: useCallback((e) => {
                            props.onDayChange(e.target.value);
                        }, [props.onDayChange]), label: "Day", ref: ref }, { children: [_jsx(MenuItem, { value: "", disabled: true }), props.dayOptions.map(({ value, label }) => (_jsx(MenuItem, Object.assign({ value: value }, { children: label }), value)))] }))] })))] }));
});
DateDropdownGroup.displayName = "DateDropdownGroup";
export default DateDropdownGroup;
